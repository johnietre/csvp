use clap::Parser;
use std::fs::File;
use std::io::{self, prelude::*, BufReader};

macro_rules! die {
    ($code:expr, $($arg:tt)*) => {{
        ::std::eprintln!($($arg)*);
        ::std::process::exit($code)
    }}
}

fn main() -> io::Result<()> {
    /*
    let Some(file_name) = std::env::args().skip(1).next() else {
        die!(1, "must provide filename");
    };
    */
    let args = Args::parse();
    let Some(file_name) = args.file_names.get(0) else {
        die!(1, "must provide filename");
    };
    let mut csv = CSV::new();
    let mut lines = BufReader::new(File::open("test.csv")?)
        .lines()
        .enumerate()
        .map(|(i, l)| match l {
            Ok(l) => (i + 1, l),
            Err(e) => die!(1, "error reading file: {e}"),
        });

    let Some((lineno, line)) = lines.next() else {
        return Ok(());
    };
    csv.headers = line.split(',').map(String::from).collect();
    let ncols = csv.headers.len();
    csv.types = Vec::with_capacity(ncols);

    let Some((lineno, line)) = lines.next() else {
        return Ok(());
    };
    let row = line.split(',').collect::<Vec<_>>();
    if row.len() != ncols {
        die!(1, "expected {} cols, found {} on line {}", ncols, row.len(), lineno);
    }
    let mut values = Vec::with_capacity(ncols);
    for (col, val) in row.into_iter().enumerate().map(incr_en) {
        if val == "" {
            csv.types.push(Value::Null);
            values.push(Value::Null);
        } else if is_float(&val) {
            csv.types.push(Value::F64(0.0));
            match val.parse() {
                Ok(f) => values.push(Value::F64(f)),
                Err(e) => die!(1, "error parsing value in row {lineno} col {col}: {e}"),
            }
        } else {
            csv.types.push(Value::Str(String::new()));
            values.push(Value::Str(val.to_string()));
        }
    }
    csv.values.push(values);

    for (lineno, line) in lines {
        let row = line.split(',').collect::<Vec<_>>();
        if row.len() != ncols {
            die!(1, "expected {} cols, found {} on line {}", ncols, row.len(), lineno);
        }
        let mut values = Vec::with_capacity(ncols);
        for (i, val) in row.into_iter().enumerate() {
            if val == "" {
                values.push(Value::Null);
            } else if is_float(&val) {
                match val.parse() {
                    Ok(f) => values.push(Value::F64(f)),
                    Err(e) => die!(1, "error parsing value in row {lineno} col {0}: {e}", i + 1),
                }
            }

            if val == "" {
                values.push(Value::Null);
            } else {
                match csv.types[i].parse_as_self(val) {
                    Ok(value) => {
                        if csv.types[i].is_null() {
                            csv.types[i] = value.to_type();
                        }
                        values.push(value);
                    }
                    Err(e) => die!(1, "error parsing value in row {lineno} col {0}: {e}", i + 1),
                }
            }
        }
        csv.values.push(values);
    }

    println!("{:?}", csv.headers);
    println!("{:?}", csv.types);
    csv.values.iter().for_each(|r| println!("{:?}", r));
    Ok(())
}

struct CSV {
    headers: Vec<String>,
    types: Vec<Value>,
    values: Vec<Vec<Value>>,
}

impl CSV {
    fn new() -> Self {
        Self {
            headers: Vec::new(),
            types: Vec::new(),
            values: Vec::new(),
        }
    }
}

#[derive(Clone, Debug, PartialEq)]
enum Value {
    I8(i8),
    I16(i16),
    I32(i32),
    I64(i64),
    I128(i128),

    U8(u8),
    U16(u16),
    U32(u32),
    U64(u64),
    U128(u128),

    F32(f32),
    F64(f64),

    Bool(bool),

    Str(String),
    Null,
}

impl Value {
    fn is_int(&self) -> bool {
        use Value::*;
        matches!(
            self,
            I8(_) | I16(_) | I32(_) | I64(_) | I128(_) |
            U8(_) | U16(_) | U32(_) | U64(_) | U128(_),
        )
    }

    fn is_signed(&self) -> bool {
        use Value::*;
        matches!(self, I8(_) | I16(_) | I32(_) | I64(_) | I128(_))
    }

    fn is_unsigned(&self) -> bool {
        use Value::*;
        matches!(self, U8(_) | U16(_) | U32(_) | U64(_) | U128(_))
    }

    fn is_float(&self) -> bool {
        use Value::*;
        matches!(self, F32(_) | F64(_))
    }

    fn is_null(&self) -> bool {
        matches!(self, Value::Null)
    }

    // Attempts to parse the given value as the type of self. If self is Null, it will attempt to
    // parse it as a float, then as a string, or Null if it's empty.
    fn parse_as_self<S: AsRef<str>>(&self, s: S) -> Result<Self, Box<dyn std::error::Error>> {
        use Value::*;
        let s = s.as_ref();
        if s == "" {
            return Ok(Value::Null);
        }
        match self {
            I8(_) => Ok(I8(s.parse()?)),
            I16(_) => Ok(I16(s.parse()?)),
            I32(_) => Ok(I32(s.parse()?)),
            I64(_) => Ok(I64(s.parse()?)),
            I128(_) => Ok(I128(s.parse()?)),
            U8(_) => Ok(U8(s.parse()?)),
            U16(_) => Ok(U16(s.parse()?)),
            U32(_) => Ok(U32(s.parse()?)),
            U64(_) => Ok(U64(s.parse()?)),
            U128(_) => Ok(U128(s.parse()?)),
            F32(_) => Ok(F32(s.parse()?)),
            F64(_) => Ok(F64(s.parse()?)),
            Bool(_) => Ok(Bool(s.parse()?)),
            Str(_) => Ok(Str(s.to_string())),
            Null => {
                if is_float(s) {
                    s.parse().map(|f| F64(f)).map_err(|e| e.into())
                } else {
                    Ok(Str(s.to_string()))
                }
            },
        }
    }

    // Returns self but with the default/"empty" value for the interior type
    fn to_type(&self) -> Self {
        use Value::*;
        match self {
            I8(_) => I8(0),
            I16(_) => I16(0),
            I32(_) => I32(0),
            I64(_) => I64(0),
            I128(_) => I128(0),
            U8(_) => U8(0),
            U16(_) => U16(0),
            U32(_) => U32(0),
            U64(_) => U64(0),
            U128(_) => U128(0),
            F32(_) => F32(0.0),
            F64(_) => F64(0.0),
            Bool(_) => Bool(false),
            Str(_) => Str(String::new()),
            Null => Null,
        }
    }
}

fn is_int(s: &str) -> bool {
    s.chars().all(|c| c.is_ascii_digit())
}

fn is_float(s: &str) -> bool {
    let mut dec_found = false;
    s.chars()
        .all(|c| {
            if c == '.' {
                dec_found = !dec_found;
                dec_found
            } else {
                c.is_ascii_digit()
            }
        })
}

// Used as func to pass to .map() after calling .enumerate() to increment the num.
fn incr_en<T>((i, v): (usize, T)) -> (usize, T) {
    (i + 1, v)
}

#[derive(Parser, Debug)]
struct Args {
    file_names: Vec<std::path::PathBuf>,
    #[arg(long)]
    no_headers: bool,
    #[arg(long)]
    mean: Option<String>,
    #[arg(long)]
    mode: Option<String>,
    #[arg(long)]
    sd: Option<String>,
    #[arg(long)]
    dt: Option<String>,
}
